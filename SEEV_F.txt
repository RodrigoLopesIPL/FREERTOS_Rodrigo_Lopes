// Nome ALUNO A- Rodrigo Lopes
// Numero ALUNO A- 2171296

// IPLEIRIA - Instituto Politécnico de Leiria
// ESTG - Escola Superior de Tecnologia e Gestão
// LEAU- Licenciatura em Engenharia Automóvel
// SEEV - Sistemas Elétricos e Eletrônicos de Veículos

/* TP1: Pretende-se neste trabalho prático a implementação de um Sistema de Medição de Temperatura de um Motor de Combustão interna, 
utilizando um sistema operativo de tempo real FreeRTOS. */
#include <Arduino.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include <ESP32_Servo.h>

// Pinos
#define ONE_WIRE_BUS 2
#define LED_PIN 4        // Pino do LED
#define BUZZER_PIN 12    // Pino do Buzzer
#define SERVO_PIN 13     // Pino do Servo
#define RESET_BUTTON_PIN 14 // Pino do botão de reset

// Inicializa a interface OneWire
OneWire oneWire(ONE_WIRE_BUS);

// Inicializa o sensor DS18B20
DallasTemperature sensors(&oneWire);

// Inicializa o motor servo
Servo servo;

// Variável global para armazenar a temperatura simulada
float simulatedTemperature = 0.0;

// Variável para verificar o estado do botão de reset
bool resetButtonState = false;
bool lastResetButtonState = false;

// Filas para comunicação entre tarefas
QueueHandle_t temperatureQueue;
QueueHandle_t controlQueue;

// Função da tarefa que lê a temperatura do sensor
void readTemperatureTask(void *pvParameters) {
  (void)pvParameters; // Apenas para evitar avisos de variável não utilizada
  
  for (;;) {
    sensors.requestTemperatures(); // Solicita a leitura da temperatura
    float realTemperature = sensors.getTempCByIndex(0); // Lê a temperatura em graus Celsius
    
    // Simula uma temperatura 20 graus Celsius acima da real
    simulatedTemperature = realTemperature + 50.0;

    // Envia a temperatura lida para a fila
    xQueueSend(temperatureQueue, &simulatedTemperature, portMAX_DELAY);
    
    vTaskDelay(pdMS_TO_TICKS(1000)); // Aguarda um segundo antes de ler novamente
  }
}

// Função da tarefa que verifica e ativa o LED, o buzzer e o servo quando a temperatura atinge 90 graus
void controlTemperatureTask(void *pvParameters) {
  (void)pvParameters; // Apenas para evitar avisos de variável não utilizada

  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  servo.attach(SERVO_PIN); // Inicializa o servo
  
  for (;;) {
    // Recebe a temperatura da fila com um curto tempo limite
    float receivedTemperature;
    if (xQueueReceive(temperatureQueue, &receivedTemperature, pdMS_TO_TICKS(100))) {
      if (receivedTemperature >= 90.0) {
        digitalWrite(LED_PIN, HIGH); // Liga o LED
        digitalWrite(BUZZER_PIN, HIGH); // Liga o Buzzer
        servo.write(180); // Move o servo para 180 graus
      } else {
        digitalWrite(LED_PIN, LOW); // Desliga o LED
        digitalWrite(BUZZER_PIN, LOW); // Desliga o Buzzer
        servo.write(0); // Move o servo de volta para 0 graus
      }
    }

    vTaskDelay(pdMS_TO_TICKS(1000)); // Verifica a cada segundo
  }
}

// Função da tarefa que exibe a temperatura no monitor serial
void displayTemperatureTask(void *pvParameters) {
  (void)pvParameters; // Apenas para evitar avisos de variável não utilizada
  
  for (;;) {
    // Recebe a temperatura da fila com um curto tempo limite
    float receivedTemperature;
    if (xQueueReceive(temperatureQueue, &receivedTemperature, pdMS_TO_TICKS(100))) {
      Serial.print("Temperatura Simulada: ");
      Serial.print(receivedTemperature);
      Serial.println(" °C");
    }

    vTaskDelay(pdMS_TO_TICKS(50)); // Aguarda meio segundo antes de exibir novamente
  }
}

// Função da tarefa que monitora o botão de reset
void resetButtonTask(void *pvParameters) {
  (void)pvParameters; // Apenas para evitar avisos de variável não utilizada
  
  for (;;) {
    // Lê o estado do botão de reset
    resetButtonState = digitalRead(RESET_BUTTON_PIN);
    
    // Verifica se o botão de reset foi pressionado
    if (resetButtonState == LOW && lastResetButtonState == HIGH) {
      esp_restart(); // Reinicia o ESP32
    }
    
    lastResetButtonState = resetButtonState;
    
    vTaskDelay(pdMS_TO_TICKS(50)); // Verifica a cada 50 milissegundos
  }
}

void setup() {
  Serial.begin(9600);
  
  sensors.begin(); // Inicializa o sensor DS18B20

  // Inicializa as filas
  temperatureQueue = xQueueCreate(1, sizeof(float));
  controlQueue = xQueueCreate(1, sizeof(float));
  
  // Crie as tarefas do FreeRTOS
  xTaskCreatePinnedToCore(readTemperatureTask, "ReadTempTask", 10000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(controlTemperatureTask, "ControlTempTask", 10000, NULL, 2, NULL, 0); // Tarefa com prioridade 2
  xTaskCreatePinnedToCore(displayTemperatureTask, "DisplayTempTask", 10000, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(resetButtonTask, "ResetButtonTask", 10000, NULL, 3, NULL, 1); // Tarefa do botão de reset com prioridade 3
}

void loop() {
  // O loop não faz nada aqui, pois o trabalho é feito pelas tarefas do FreeRTOS.
}
